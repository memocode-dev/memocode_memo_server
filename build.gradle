import org.springframework.boot.gradle.tasks.aot.ProcessAot

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id "org.hibernate.orm" version "6.4.4.Final"
}

hibernate {
    enhancement {
        lazyInitialization true
    }
}


group = 'dev.memocode'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainers.version', "1.19.7")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    // p6spy 추가
//    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // Query dsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // meilisearch
    implementation 'com.meilisearch.sdk:meilisearch-java:0.11.8'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:mysql:1.19.7"
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled=false
}

bootBuildImage {
    if (project.hasProperty('dockerImageName') && project.hasProperty('dockerTag')) {
        imageName = "${project.property('dockerImageName')}:${project.property('dockerTag')}"
    } else {
        imageName = "ghcr.io/memocode-dev/memocode_memo_server:latest"
    }
}

tasks.withType(ProcessAot).configureEach {
    if (project.hasProperty('springProfile')) {
        args("--spring.profiles.active=${project.property('springProfile')}")
    } else {
        args("--spring.profiles.active=default")
    }
}
